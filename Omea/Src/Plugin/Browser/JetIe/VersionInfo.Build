<?xml version="1.0" encoding="utf-8" ?>
<!--
SPDX-FileCopyrightText: 2003-2008 JetBrains s.r.o.

SPDX-License-Identifier: GPL-2.0-only
-->

<project name="VersionInfo" currentframework="net-1.1">
	<description>A set of helper targets that work with version info, write it to the files, and check in the changes.</description>
	<!---->
	<!---->
	<!---->
	<!-- Generates the deterministic version number, based on the "major" and "minor" versions. -->
	<!--<script language="JS" verbose="true" prefix="version" if="false">
		<imports>
			<import namespace="System.Diagnostics" />
		</imports>
		<code>
<![CDATA[
//>
public TaskName("GenerateVersion") class GenerateVersionTask extends NAnt.Core.Task
{
/*
	public function GenerateVersionTask()
	{
	}
	*/

/*
	protected var _verMajor, _verMinor, _verBuild, _verRevision : int;

    public TaskAttribute("major", true) function get Major() : int { return _verMajor; }
    public function set Major(value : int) : void { _verMajor = value; }

    public TaskAttribute("minor", true) function get Minor() : int { return _verMinor; }
    public function set Minor(value : int) : void { _verMinor = value; }
    */

	protected function ExecuteTask() : void
	{
		//Log(Level.Info, "Executed");
		Console.WriteLine("Hello from the version task.");
	}
}
]]>
			</code>
	</script>-->
	<!---->
	<!---->
	<!-- A script that generates a new build version. -->
	<script language="C#">
		<code>
<![CDATA[
//>
protected static Project _project;
public static void ScriptMain(Project project) { _project = project; }

[TaskName("generateversion")]
public class GenerateVersionTask : NAnt.Core.Task
{
	protected int _verMajor, _verMinor, _verBuild, _verRevision;

	[TaskAttribute("major", Required=true)]
	public int Major
	{
		get { return _verMajor; }
		set { _verMajor = value; }
	}

	[TaskAttribute("minor", Required=true)]
	public int Minor
	{
		get { return _verMinor; }
		set { _verMinor = value; }
	}

	protected override void ExecuteTask()
	{
		////
		// Set the individual version components

		string	sOverride = _project.Properties["build.version.override"];	// Allows to override the autogenerated version by a given value

		if(sOverride == null)
		{	// Generate the version normally

			// Build Number: the number of full days since the first Omea autobuild
			_verBuild = (int)(DateTime.Now.Date.ToUniversalTime() - new DateTime(2003, 7, 29).ToUniversalTime()).TotalDays;

			// Revision Number: the number of minutes since midnight
			_verRevision = (int)System.Math.Floor((DateTime.UtcNow - DateTime.UtcNow.Date).TotalMinutes);
		}
		else
		{	// The version-override is specified, build for that version
			String[] sComponents = sOverride.Split('.');
			if(sComponents.Length != 4)
				throw new ArgumentException("The override-version must consist of exactly four components.");
			int[]	nComponents = new int[4];
			for(int a = 0; a < 4; a++)
			{
				nComponents[a] = int.Parse(sComponents[a]);
				if((nComponents[a] < 0) || (nComponents[a] >= 65536))
					throw new ArgumentException("Version components must be WORDs.");
			}
			_verMajor = nComponents[0];
			_verMinor = nComponents[1];
			_verBuild = nComponents[2];
			_verRevision = nComponents[3];
		}

		////
		// Set the composite version numbers
		String sVersionComma = String.Format("{0},{1},{2},{3}", _verMajor, _verMinor, _verBuild, _verRevision);
		String sVersionDot = String.Format("{0}.{1}.{2}.{3}", _verMajor, _verMinor, _verBuild, _verRevision);

		////
		// Assign to the _project properties
		_project.Properties["build.version.major"] = _verMajor.ToString();
		_project.Properties["build.version.minor"] = _verMinor.ToString();
		_project.Properties["build.version.build"] = _verBuild.ToString();
		_project.Properties["build.version.revision"] = _verRevision.ToString();
		_project.Properties["build.version.full.comma"] = sVersionComma;
		_project.Properties["build.version.full.dot"] = sVersionDot;

		_project.Log(Level.Info, String.Format("Build version was set to {0}.", sVersionDot));
	}
}
]]>
		</code>
	</script>
	<!---->
	<!---->
	<!-- A script that saves the old version in a given property, and then restores it. -->
	<script language="C#" if="true">
		<imports>
			<import namespace="System.Xml" />
		</imports>
		<code>
<![CDATA[
//>

protected static Project _project;
public static void ScriptMain(Project project)
{
	_project = project;
}

[TaskName("saveversion")]
public class SaveVersionTask : NAnt.Core.Task
{
	protected String _sPropertyName;

	[TaskAttribute("propertyname", Required=true)]
	public String PropertyName
	{
		get { return _sPropertyName; }
		set { _sPropertyName = value; }
	}

	protected override void ExecuteTask()
	{
		XmlDocument	xml = new XmlDocument();
		XmlElement xmlVersions = xml.CreateElement("Versions");
		xml.AppendChild(xmlVersions);

		foreach(String name in new String[]{"build.version.major", "build.version.minor", "build.version.build", "build.version.revision", "build.version.full.comma", "build.version.full.dot"})
			xmlVersions.SetAttribute(name, _project.Properties[name]);

		_project.Properties[_sPropertyName] = xmlVersions.OuterXml;
	}
}

[TaskName("loadversion")]
public class LoadVersionTask : NAnt.Core.Task
{
	protected String _sPropertyName;

	[TaskAttribute("propertyname", Required=true)]
	public String PropertyName
	{
		get { return _sPropertyName; }
		set { _sPropertyName = value; }
	}

	protected override void ExecuteTask()
	{
		XmlDocument	xml = new XmlDocument();
		xml.LoadXml(_project.Properties[_sPropertyName]);
		XmlElement xmlVersions = xml["Versions"];

		foreach(String name in new String[]{"build.version.major", "build.version.minor", "build.version.build", "build.version.revision", "build.version.full.comma", "build.version.full.dot"})
			_project.Properties[name] = xmlVersions.GetAttribute(name);
	}
}
]]>
		</code>
	</script>
	<!---->
	<!---->
	<!---->
	<!-- Updates the project and file version of the DLL by propagating the build version into it -->
	<script language="C#" verbose="true">
		<imports>
			<import namespace="System.Diagnostics" />
		</imports>
		<code>
<![CDATA[
//>
protected static Project _project;
public static void ScriptMain(Project project)
{
	_project = project;
}

[TaskName("setrcversion")]
public class SetRcVersionTask : NAnt.Core.Task
{
	protected bool _bCheckout = true;
	protected string _sVersion;
	protected string _sVersionDotted;

	[TaskAttribute("checkout", Required=true)]
	public bool Checkout
	{
		get { return _bCheckout; }
		set { _bCheckout = value; }
	}

	protected override void ExecuteTask()
	{
		// Retrieve the version string from the project properties
		_sVersion = _project.Properties["build.version.full.comma"];
		_sVersionDotted = _project.Properties["build.version.full.dot"];

		//////// Debug Definitions
		// _sVersion = "1,2,3,4";
		// _sVersionDotted = "1.2.3.4";

		if((_sVersion == null) || (_sVersionDotted == null))
		{
			_project.Log(Level.Warning, "Version information properties not set, build number was not applied to the component.");
			return;
		}

		// Checkout the resource file (if needed)
		if(_bCheckout)
		{
			string[]	filenames = new string[]{String.Format("{0}\\AssemblyVersion.rc", _project.Properties["dir.project.own"])};
			using(new PerforceClient(_project, filenames, String.Format("Version number set to [{0}].", _sVersion)))
				RewriteRcVersion();
		}
		else
			RewriteRcVersion();

		_project.Log(Level.Info, "Version of the component was set to [" + _sVersion + "].");
	}

	/// Does the very rewriting, can be called either with perforce or without it
	protected void RewriteRcVersion()
	{
		string	sFilename = _project.Properties["dir.project.own"] + "/AssemblyVersion.rc";

		// Clear the RO attribute from the RC file
		FileInfo	fi = new FileInfo(sFilename);
		fi.Attributes = fi.Attributes & ~FileAttributes.ReadOnly;

		// Load the resource file
		StreamReader	sr = new StreamReader(new FileStream(sFilename, FileMode.Open, FileAccess.Read, FileShare.Read), Encoding.Default);
		string	sRes = sr.ReadToEnd();
		sr.Close();

		// Modify the version info
		sRes = Regex.Replace(sRes, @"(?<prefix>(PRODUCTVERSION|FILEVERSION)\s+)\d+,\d+,\d+,\d+(?<suffix>\s+)", "${prefix}" + _sVersion + "${suffix}");
		sRes = Regex.Replace(sRes, @"(?<prefix>VALUE\s+""(ProductVersion|FileVersion)"",\s+"")\d+\.\d+\.\d+\.\d+(?<suffix>""\s+)", "${prefix}" + _sVersionDotted + "${suffix}");
		//string s = @"\"";
		//@"(?<prefix>VALUE\s+\"FileVersion\",\s+\")\d+\.\d+\.\d+\.\d+(?<suffix>\"\s+)";

		// Save the resource file
		StreamWriter	sw = new StreamWriter(new FileStream(sFilename, FileMode.Create, FileAccess.Write, FileShare.Read), Encoding.Default);
		sw.Write(sRes);
		sw.Close();
	}
}

public class PerforceClient : IDisposable
{
	/// NANT project.
	Project	_oNantProject;

	/// List of the P4 paths of the files to checkin.
	/// Non-null only in between the checkout and checkin.
	Hashtable	_filelist = null;

	/// Checkin comment.
	string	_description = null;

	public PerforceClient(Project project)
	{
		if(project == null)
			throw new ArgumentNullException("project");
		_oNantProject = project;
	}

	public PerforceClient(Project project, string[] filenames, string description)
	{
		if(project == null)
			throw new ArgumentNullException("project");
		_oNantProject = project;

		CheckOut(filenames, description);
	}

	/// Performs checkout of the files specified and remembers the list
	public void CheckOut(string[] filenames, string description)
	{
		if(_oNantProject == null)
			throw new ObjectDisposedException(typeof(PerforceClient).Name);
		if(_filelist != null)
			throw new InvalidOperationException("Cannot checkout for the second time.");

		_oNantProject.Log(Level.Info, "Initiating checkout. " + description);

		// Prepare the command
		StringWriter	sw = new StringWriter();
		sw.Write(GetP4Client());
		sw.Write("edit");
		foreach(string filename in filenames)
			sw.Write(" {0}", filename);

		// Invoke P4
		string sEditList = RunProcess(_oNantProject, "Checkout", "p4.exe", sw.ToString(), null);

		// Build the list of checked-out files
		Regex	regexFiles = new Regex("(//[^ #]+)");
		Match	matchFiles = regexFiles.Match(sEditList);
		_filelist = new Hashtable();
		while(matchFiles.Success)
		{
			_filelist[matchFiles.Value] = true;
			matchFiles = matchFiles.NextMatch();
		}

		_description = description;	// Store
	}

	/// Checks in the previously checked-out files.
	public void CheckIn()
	{
		if(_oNantProject == null)
			throw new ObjectDisposedException(typeof(PerforceClient).Name);
		if(_filelist == null)
			throw new InvalidOperationException("Must checkout before checkin.");

		_oNantProject.Log(Level.Info, "Initiating checkin. " + _description);

		// Generate the changespec
		StringWriter	swChangespec = new StringWriter();
		swChangespec.WriteLine("Change: new");
		swChangespec.WriteLine();
		swChangespec.WriteLine("Description: {0}", _description);
		swChangespec.WriteLine();
		swChangespec.WriteLine("Files:");
		// Add files
		foreach(string filename in _filelist.Keys)
			swChangespec.WriteLine("    {0}", filename);
		swChangespec.WriteLine();
		_filelist = null;

		_oNantProject.Log(Level.Info, String.Format("Submitting changespec: [{0}].", swChangespec));

		// Exec checkin
		RunProcess(_oNantProject, "Checkin", "p4.exe", GetP4Client() + "submit -i", swChangespec.ToString());
	}

	/// Executes an external process, feeds it with STDIN, outputs its error and warning streams, and throws an exception on failure code
	public static string RunProcess(Project project, string name, string command, string arguments, string stdin)
	{
		// Start the process with command-line arguments specified
		Process process = new Process();
		process.StartInfo.FileName = command;
		process.StartInfo.Arguments = arguments;
		process.StartInfo.CreateNoWindow = true;
		process.StartInfo.UseShellExecute = false;
		process.StartInfo.RedirectStandardInput = true;
		process.StartInfo.RedirectStandardOutput = true;
		process.StartInfo.RedirectStandardError = true;
		process.Start();
		DateTime timeStart = DateTime.Now;

		// If there is any STDIN content, submit it
		if((stdin != null) && (stdin.Length > 0))
		{
			process.StandardInput.Write(stdin);
			process.StandardInput.Close();
		}

		// Retrieve the output
		string	sInfo = process.StandardOutput.ReadToEnd();
		string	sError = process.StandardError.ReadToEnd();

		// Wait synchronously for the process to complete
		process.WaitForExit();

		// Print the output
		if(sInfo.Length != 0)
			project.Log(Level.Info, sInfo);
		if(sError.Length != 0)
			project.Log(Level.Error, sError);

		// Check for faulires
		if(process.ExitCode != 0)
			throw new Exception(String.Format("{0} has failed with exit code {1}.", name, process.ExitCode));
		project.Log(Level.Info, String.Format("{0} completed in {1}.", name, process.ExitTime - timeStart));

		return sInfo;
	}

	private string GetP4Client()
	{
	    string client = _oNantProject.Properties ["p4client"];
	    if ( client != null && client.Length > 0 )
	    {
	        return "-c " + client + " ";
	    }
	    return "";
	}

	public void Dispose()
	{
		// Disposed already
		if(_oNantProject == null)
			return;

		// No pending files
		if(_filelist == null)
			return;

		CheckIn();
	}

	~PerforceClient()
	{
		Dispose();
	}
}

]]>
		</code>
	</script>
</project>
