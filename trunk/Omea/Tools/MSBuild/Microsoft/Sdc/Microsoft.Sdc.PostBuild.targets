<?xml version="1.0" encoding="utf-8"?>
<!--
  <copyright company="JetBrains">
  Copyright © 2003-2008 JetBrains s.r.o.
  You may distribute under the terms of the GNU General Public License, as published by the Free Software Foundation, version 2 (see License.txt in the repository root folder).
  </copyright>
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Override these properties to insert custom targets before key events -->
	<PropertyGroup>
		<EndPostBuildDependsOn />
	</PropertyGroup>
	<PropertyGroup>
		<DestinationFolder>$(MSBuildProjectDirectory)\..\..\$(SolutionName)Assemblies</DestinationFolder>
	</PropertyGroup>
	<Target Name="PostBuildTargets" DependsOnTargets="&#xD;&#xA;        CompressPath;&#xD;&#xA;        AfterBuild;&#xD;&#xA;        Custom2003Satellites&#xD;&#xA;        "></Target>
	<Target Name="Custom2003Satellites" Condition="'$(Custom2003Resources)'=='true'" DependsOnTargets="          &#xD;&#xA;            AfterBuild2003;&#xD;&#xA;            PostbuildCreateResourceGroups;&#xD;&#xA;            PostbuildCreateSatelliteAssemblies;&#xD;&#xA;            PostbuildCopyResourcesLocal"></Target>
	<UsingTask AssemblyFile="$(BuildPath)\bin\Microsoft.Sdc.Tasks.dll" TaskName="Microsoft.Sdc.Tasks.AssignCulture" />
	<UsingTask AssemblyFile="$(BuildPath)\bin\Microsoft.Sdc.Tasks.dll" TaskName="Microsoft.Sdc.Tasks.ConsoleReadLine" />
	<UsingTask AssemblyFile="$(BuildPath)\bin\Microsoft.Sdc.Tasks.dll" TaskName="Microsoft.Sdc.Tasks.File.GetFiles" />
	<UsingTask AssemblyFile="$(BuildPath)\bin\Microsoft.Sdc.Tasks.dll" TaskName="Microsoft.Sdc.Tasks.GetMetadataValueFromList" />
	<UsingTask AssemblyFile="$(BuildPath)\bin\Microsoft.Sdc.Tasks.dll" TaskName="Microsoft.Sdc.Tasks.GlobalAssemblyCache.AddAssembly" />
	<UsingTask AssemblyFile="$(BuildPath)\bin\Microsoft.Sdc.Tasks.dll" TaskName="Microsoft.Sdc.Tasks.ShortenPath" />
	<Target Name="CompressPath">
		<Microsoft.Sdc.Tasks.ShortenPath InputPath="$(DestinationFolder)">
			<Output TaskParameter="OutputPath" PropertyName="DestinationFolder" />
		</Microsoft.Sdc.Tasks.ShortenPath>
	</Target>
	<PropertyGroup>
		<ProjectTargetDir Condition="'$(WDTargetDir)' != ''">@(_WDOutputPathItem-&gt;'%(FullPath)\bin\**\*.*')</ProjectTargetDir>
		<ProjectTargetDir Condition="'$(WDTargetDir)' == ''">$(ProjectDir)$(OutDir)\**\*.*</ProjectTargetDir>
	</PropertyGroup>
	<!-- AfterBuild target here to plugin to the standard msbuild for VS 2005 
         copy up output folder an sattelite assemblies to MainAssemblies Folder -->
	<Target Name="AfterBuild" Condition=" ('$(RunPostBuildEvent)'!='OnOutputUpdated' or&#xD;&#xA;                '@(IntermediateAssemblyBeforeTimeStamp)'!='@(IntermediateAssemblyAfterTimeStamp)')&#xD;&#xA;                and '$(Custom2003Resources)'!='true'" DependsOnTargets="StartAfterBuild;Gac;$(EndPostBuildDependsOn)"></Target>
	<Target Name="StartAfterBuild">
		<Error Condition=" '$(BuildPath)' == '' " Text="You must define the BuildPath property in your .csproj file" />
		<Error Condition=" '$(SolutionName)' == '*Undefined*' " Text="You must define SolutionName inside your .csproj file" />
		<CreateItem Include="$(ProjectTargetDir)">
			<Output TaskParameter="Include" ItemName="FilesToCopy" />
		</CreateItem>
		<Message Text="Copying files from $(ProjectTargetDir) - Files: @(FilesToCopy)" />
		<Copy SkipUnchangedFiles="true" SourceFiles="@(FilesToCopy)" DestinationFiles="@(FilesToCopy-&gt;'$(DestinationFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
	</Target>
	<!-- AfterBuild For VS 2003 with custom sattelite assemblies. 
         copy up output folder ONLY to Mainassemblies, sattelites will be built in main assemblies -->
	<Target Name="AfterBuild2003" DependsOnTargets="StartAfterBuild2003;Gac;$(EndPostBuildDependsOn)"></Target>
	<Target Name="StartAfterBuild2003">
		<CreateItem Include="$(ProjectDir)$(OutDir)\*.*">
			<Output TaskParameter="Include" ItemName="FilesToCopy" />
		</CreateItem>
		<Message Text="Copying files from $(ProjectDir)$(OutDir) - Files: @(FilesToCopy)" />
		<Copy SkipUnchangedFiles="true" SourceFiles="@(FilesToCopy)" DestinationFiles="@(FilesToCopy-&gt;'$(DestinationFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
	</Target>
	<Target Name="PostbuildCreateResourceGroups">
		<CreateItem Include="$(ProjectDir)Localisation\**\*.resx" Condition="Exists('$(ProjectDir)Localisation')" AdditionalMetadata="Culture=%(Include.RecursiveDir)">
			<Output TaskParameter="Include" ItemName="ResourceFiles" />
		</CreateItem>
		<!--        
        <File.GetFiles Condition="Exists('$(ProjectDir)Localisation')" Recursive="true" Path="$(ProjectDir)Localisation" Group="$(ProjectName)" Masks="*.resx">
        <Output TaskParameter="OutputFiles" ItemName="ResourceFiles"></Output>
        </File.GetFiles>
-->
	</Target>
	<!-- note input transform, this is to ensure that @(ResourceFiles) includes ALL resources even if only one has changed
         if I dont use the transform then MSBuild cleverly limits the list to those that have changed, but we want to build all if one 
         or  more has changed -->
	<Target Name="PostbuildCreateSatelliteAssemblies" Inputs="@(ResourceFiles-&gt;'%(Identity)')" Outputs="$(DestinationFolder)\%(Culture)\$(ProjectName).resources.dll)'">
		<Microsoft.Sdc.Tasks.AssignCulture Files="@(ResourceFiles)" UserDefinedCultures="cy-GB">
			<Output TaskParameter="AssignedFilesWithCulture" ItemName="ResxWithCulture" />
		</Microsoft.Sdc.Tasks.AssignCulture>
		<!--
        <GenerateResource
            Sources="@(ResxWithCulture)"
            Condition=" '@(ResxWithCulture)' != '' "
            References=""
            UseSourcePath="false"
            OutputResources="@(ResxWithCulture->'$(DestinationFolder)\%(Filename).resources')">
            <Output
                TaskParameter="OutputResources"
                ItemName="ManifestResourceWithCulture"/>
        </GenerateResource>
-->
		<Exec Command="$(BuildPath)\Tools\Resgen\1.1\ResGen.exe /compile %(ResxWithCulture.Identity),$(DestinationFolder)\%(ResxWithCulture.FileName).resources" />
		<MakeDir Directories="$(DestinationFolder)\%(ResxWithCulture.Culture)" />
		<AL EmbedResources="@(ResxWithCulture-&gt;'$(DestinationFolder)\%(FileName).resources')" Culture="%(Culture)" TemplateFile="" KeyContainer="" KeyFile="$(ProjectKeyFile)" DelaySign="true" OutputAssembly="$(DestinationFolder)\%(Culture)\$(ProjectName).resources.dll" ToolPath="$(Windir)\microsoft.net\framework\v1.1.4322">
			<Output TaskParameter="OutputAssembly" ItemName="SatelliteAssemblies" />
		</AL>
	</Target>
	<!-- Copies resources back to the binary folder so that this project can run in the IDE
         debugger. Note that this won't copy all the resources down on the first pass but it
         will get all of those for dependent assemblies since they will have already built. -->
	<Target Name="PostbuildCopyResourcesLocal">
		<GetMetadataValueFromList List="@(AllAssemblies)" MetadataNameToMatch="ProjectName" MetadataValueToMatch="$(ProjectName)" MetadataNameToExtract="SatelliteAssemblies">
			<Output TaskParameter="Value" PropertyName="CopySatellites" />
		</GetMetadataValueFromList>
		<CreateItem Include="$(DestinationFolder)\%(ResourceCultures.Identity)\*" Condition=" '$(CopySatellites)' == 'true' " AdditionalMetadata="Culture=%(ResourceCultures.Identity)">
			<Output TaskParameter="Include" ItemName="ResourceFilesToCopy" />
		</CreateItem>
		<RemoveDir Directories="@(ResourceCultures-&gt;'$(TargetDir)%(Identity)')" Condition=" '$(CopySatellites)' == 'true' " />
		<Microsoft.Build.Tasks.Copy Condition=" '$(CopySatellites)' == 'true'  " SourceFiles="@(ResourceFilesToCopy)" DestinationFolder="$(TargetDir)%(ResourceFilesToCopy.Culture)" />
	</Target>
	<Target Name="Gac">
		<Message Text="GAC assembly &quot;@(AllAssemblies-&gt;'%(Filename)')&quot;." Condition=" '%(AllAssemblies.ProjectName)' == '$(MSBuildProjectName)' and '%(AllAssemblies.Gac)' == 'true' " />
		<GlobalAssemblyCache.AddAssembly AssemblyPath="$(DestinationFolder)\%(AllAssemblies.Identity)" Force="true" Condition=" '%(AllAssemblies.ProjectName)' == '$(MSBuildProjectName)' and '%(AllAssemblies.Gac)' == 'true' " />
	</Target>
</Project>