<?xml version="1.0" encoding="UTF-8" ?>
<!--
SPDX-FileCopyrightText: 2003-2008 JetBrains s.r.o.

SPDX-License-Identifier: GPL-2.0-only
-->

<project name="IexploreOmea" default="IexploreOmea.Build" currentframework="net-1.1">
	<description>JetBrains Omea Add-on for Internet Explorer.</description>
	<target name="IexploreOmea.Build">
		<property name="project.name" value="IexploreOmea" /> <!-- Name of this project -->
		<property name="project.define" value="JETIE_OMEA" /> <!-- A symbol that rules compilation of common files in particular project mode -->
		<!---->
		<property name="build.dir" value="./NANT" overwrite="false" />
		<property name="build.dir" value="${path::get-full-path(build.dir)}" overwrite="true" />
		<property name="dir.output" value="${build.dir}" />
		<!-- Set up the project to be compiled from the source files located in the temporary folder. -->
		<property name="dir.project" value="." overwrite="false" />
		<property name="dir.project" value="${path::get-full-path('.')}" overwrite="true" />
		<property name="dir.intermediate" value="${build.dir}/obj/${project.name}" />
		<property name="dir.project.localcopy" value="${dir.intermediate}/Src" overwrite="true" />
		<!--<delete dir="${dir.intermediate}" failonerror="false" />-->
		<copy todir="${dir.project.localcopy}">
			<fileset>
				<include name="${dir.project}/*.cpp" />
				<include name="${dir.project}/*.h" />
				<include name="${dir.project}/*.rc" />
				<include name="${dir.project}/Res/**" />
				<include name="${dir.project}/${project.name}/**" />
			</fileset>
		</copy>
		<property name="dir.project" value="${dir.project.localcopy}" overwrite="true" />
		<!---->
		<!-- Project subfolders -->
		<property name="dir.project.common" value="${dir.project}" />
		<property name="dir.project.own" value="${dir.project.common}/${project.name}" />
		<!-- Trace -->
		<property name="trace" value="false" unless="${property::exists('trace')}" />
		<property name="trace.define" value="_TRACE" if="${trace}" />
		<property name="trace.define" value="_NTRACE" unless="${trace}" />
		<!---->
		<!---->
		<!-- Set the file and product version -->
		<setrcversion checkout="false" />
		<!---->
		<!-- Compile for Unicode -->
		<property name="unicode" value="true" />
		<call target="IexploreOmea.CompileConfiguration" />
		<!---->
		<!-- Compile for Ansi -->
		<property name="unicode" value="false" />
		<call target="IexploreOmea.CompileConfiguration" />
	</target>
	<!---->
	<!---->
	<!---->
	<!-- Compiles an individual project's configuration, either Unicode or Ascii, as defined by the properties set before calling this target. Specify the boolean ${unicode} property. -->
	<target name="IexploreOmea.CompileConfiguration">
		<!-- Character set -->
		<property name="charset" value="Unicode" if="${unicode}" />
		<property name="charset" value="MultiByte" unless="${unicode}" />
		<echo message="Building ${project.name}, character set is ${charset}." />
		<!-- Choose the intermediate directory depending on the build type -->
		<property name="dir.intermediate.base" value="${dir.intermediate}" /> <!-- Store the value to restore it on return -->
		<property name="dir.intermediate" value="${dir.intermediate.base}W" if="${unicode}" /> <!-- Unicode version -->
		<property name="dir.intermediate" value="${dir.intermediate.base}A" unless="${unicode}" /> <!-- ASCII version -->
		<!-- Create the essential directories -->
		<mkdir dir="${dir.output}" />
		<mkdir dir="${dir.intermediate}" />
		<!---->
		<!-- Compile the Resources -->
		<!-- DirtyHack: define properties that will determine unicodness of the resource compilation, as <define/> would not obey the if/unless prop -->
		<property name="rc-unicode-define-1" value="UNICODE" if="${unicode}" />
		<property name="rc-unicode-define-1" value="" unless="${unicode}" />
		<property name="rc-unicode-define-2" value="_UNICODE" if="${unicode}" />
		<property name="rc-unicode-define-2" value="" unless="${unicode}" />
		<rc rcfile="${dir.project.own}/${project.name}.rc" output="${dir.intermediate}/${project.name}.res"
			langid="1033">
			<!-- options="/d NDEBUG /l 0x419 ${rc.arg.charset}" -->
			<defines>
				<define name="NDEBUG" />
				<!-- TODO: uncomment when if starts working for define
				<define name="UNICODE" if="${unicode}" />
				<define name="_UNICODE" if="${unicode}" />
				-->
				<define name="rc-unicode-define-1" />
				<define name="rc-unicode-define-2" />
				<define name="${project.define}" />
				<define name="${trace.define}" />
			</defines>
		</rc>
		<!-- Generate the precompiled header -->
		<cl outputdir="${dir.intermediate}" characterset="${charset}" pchfile="${dir.intermediate}/StdAfx.pch"
			pchmode="Create" pchthroughfile="stdafx.h">
			<arg value="/O1" />
			<arg value="/GL" />
			<arg value="/G7" />
			<arg value="/EHsc" />
			<arg value="/MT" />
			<arg value="/GR" />
			<arg value="/W3" />
			<arg value="/c" />
			<arg value="/Wp64" />
			<arg value="/TP" />
			<defines>
				<define name="WIN32" />
				<define name="_WINDOWS" />
				<define name="NDEBUG" />
				<define name="_USRDLL" />
				<define name="_ATL_ATTRIBUTES" />
				<define name="_WINDLL" />
				<define name="_ATL_STATIC_REGISTRY" />
				<define name="${project.define}" />
				<define name="${trace.define}" />
			</defines>
			<sources>
				<include name="${dir.project.common}/StdAfx.cpp" />
			</sources>
		</cl>
		<!--  Compile C++ files   -->
		<cl outputdir="${dir.intermediate}" characterset="${charset}" pchfile="${dir.intermediate}/StdAfx.pch"
			pchmode="Use" pchthroughfile="stdafx.h">
			<arg value="/O1" />
			<arg value="/GL" />
			<arg value="/G7" />
			<arg value="/EHsc" />
			<arg value="/MT" />
			<arg value="/GR" />
			<arg value="/W3" />
			<arg value="/c" />
			<arg value="/Wp64" />
			<arg value="/TP" />
			<defines>
				<define name="WIN32" />
				<define name="_WINDOWS" />
				<define name="NDEBUG" />
				<define name="_USRDLL" />
				<define name="_ATL_ATTRIBUTES" />
				<define name="_WINDLL" />
				<define name="_ATL_STATIC_REGISTRY" />
				<define name="${project.define}" />
				<define name="${trace.define}" />
			</defines>
			<sources>
				<!-- Common Sources -->
				<include name="${dir.project.common}/ActionManager.cpp" />
				<include name="${dir.project.common}/Band.cpp" />
				<include name="${dir.project.common}/DynamicClassFactory.cpp" />
				<include name="${dir.project.common}/JetIe.cpp" />
				<include name="${dir.project.common}/JetIeException.cpp" />
				<include name="${dir.project.common}/JetIePlugin.cpp" />
				<include name="${dir.project.common}/JetRpcClient.cpp" />
				<include name="${dir.project.common}/MainToolbarButton.cpp" />
				<include name="${dir.project.common}/PopupNotification.cpp" />
				<include name="${dir.project.common}/SettingStore.cpp" />
				<include name="${dir.project.common}/Wrappers.cpp" />
				<!-- Individual Sources -->
				<include name="${dir.project.own}/AboutDlg.cpp" />
				<include name="${dir.project.own}/OmeaApplication.cpp" />
				<include name="${dir.project.own}/OmeaHelper.cpp" />
				<include name="${dir.project.own}/OmeaOptionsDialog.cpp" />
				<include name="${dir.project.own}/OmeaRequest.cpp" />
				<include name="${dir.project.own}/OmeaRequestQueue.cpp" />
				<include name="${dir.project.own}/OmeaSettingStore.cpp" />
			</sources>
		</cl>
		<!-- Link -->
		<!-- â€¦ define the output file name -->
		<property name="output.pathname.ext" value="${dir.output}/${project.name}W.dll" if="${unicode}" />
		<property name="output.pathname.ext" value="${dir.output}/${project.name}A.dll" unless="${unicode}" />
		<link output="${output.pathname.ext}">
			<arg value="/INCREMENTAL:NO" />
			<arg value="/DLL" />
			<arg value="/IDLOUT:&quot;_${project.name}.idl&quot;" />
			<arg value="/SUBSYSTEM:WINDOWS" />
			<arg value="/OPT:REF" />
			<arg value="/OPT:ICF" />
			<arg value="/OPT:NOWIN98" />
			<arg value="/LTCG" />
			<arg value="/RELEASE" />
			<arg value="/IMPLIB:&quot;${dir.intermediate}/${project.name}.lib&quot;" />
			<arg value="/MACHINE:X86" />
			<!-- Object code -->
			<sources basedir="${dir.intermediate}">
				<!-- File Compiled from Precompiled Header cpp-File -->
				<include name="StdAfx.obj" />
				<!-- Files Compiled From Common Sources -->
				<include name="ActionManager.obj" />
				<include name="Band.obj" />
				<include name="DynamicClassFactory.obj" />
				<include name="JetIe.obj" />
				<include name="JetIeException.obj" />
				<include name="JetIePlugin.obj" />
				<include name="JetRpcClient.obj" />
				<include name="MainToolbarButton.obj" />
				<include name="PopupNotification.obj" />
				<include name="SettingStore.obj" />
				<include name="Wrappers.obj" />
				<!-- Files Compiled From Individual Sources -->
				<include name="AboutDlg.obj" />
				<include name="OmeaApplication.obj" />
				<include name="OmeaHelper.obj" />
				<include name="OmeaOptionsDialog.obj" />
				<include name="OmeaRequest.obj" />
				<include name="OmeaRequestQueue.obj" />
				<include name="OmeaSettingStore.obj" />
				<!-- Resource Files -->
				<include name="${project.name}.res" />
				<!-- Standard Libraries (not mentioned explicitly in the CPP files -->
				<include name="kernel32.lib" />
				<include name="user32.lib" />
				<include name="gdi32.lib" />
				<include name="winspool.lib" />
				<include name="comdlg32.lib" />
				<include name="advapi32.lib" />
				<include name="shell32.lib" />
				<include name="ole32.lib" />
				<include name="oleaut32.lib" />
				<include name="uuid.lib" />
				<include name="odbc32.lib" />
				<include name="odbccp32.lib" />
			</sources>
		</link>
		<!-- Terminate -->
		<property name="dir.intermediate" value="${dir.intermediate.base}" /> <!-- Restore property value -->
	</target>
	<!---->
	<!---->
	<include buildfile="VersionInfo.Build" />
</project>
