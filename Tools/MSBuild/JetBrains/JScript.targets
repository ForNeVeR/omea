<?xml version="1.0" encoding="utf-8"?>
<!--
SPDX-FileCopyrightText: 2003-2008 JetBrains s.r.o.

SPDX-License-Identifier: GPL-2.0-only
-->
<!--
***********************************************************************************************
Microsoft.CSharp.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for C# .NET projects.
For example, it contains the step that actually calls the C# compiler.  The remainder
of the build process is defined in Microsoft.Common.targets, which is imported by
this file.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="JScript" AssemblyFile="JetBrains.Build.JScript.dll" />
	<UsingTask TaskName="CreateCSharpManifestResourceName" AssemblyName="Microsoft.Build.Tasks, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
	<PropertyGroup>
		<!-- <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildBinPath)\Microsoft.CSharp.targets</MSBuildAllProjects> -->
		<DefaultLanguageSourceExtension>.js</DefaultLanguageSourceExtension>
		<Language>JScript</Language>
	</PropertyGroup>
	<!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.

        [IN]
        @(ResxWithNoCulture) - The names the non-culture .RESX files.
        @(ResxWithCulture) - The names the culture .RESX files.
        @(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).
        @(NonResxWithCulture) - The names of the culture non-RESX files (like bitmaps, etc).

        [OUT]
        @(ManifestResourceWithNoCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestResourceWithCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestNonResxWithNoCulture) - The corresponding manifest resource name.
        @(ManifestNonResxWithCulture) - The corresponding manifest resource name.

    For C# applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->
	<PropertyGroup>
		<CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
	</PropertyGroup>
	<Target Name="CreateManifestResourceNames" Condition="'@(ResxWithNoCulture)@(ResxWithCulture)@(NonResxWithNoCulture)@(NonResxWithCulture)'!=''" DependsOnTargets="$(CreateManifestResourceNamesDependsOn)">
		<!-- Create the target resource names for non-culture resx files. -->
		<CreateCSharpManifestResourceName Condition="'@(ResxWithNoCulture)'!=''" ResourceFiles="@(ResxWithNoCulture)" RootNamespace="$(RootNamespace)">
			<Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithNoCultureName" />
		</CreateCSharpManifestResourceName>
		<!-- Create the target resource names for culture resx files. -->
		<CreateCSharpManifestResourceName Condition="'@(ResxWithCulture)'!=''" ResourceFiles="@(ResxWithCulture)" RootNamespace="$(RootNamespace)">
			<Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithCultureName" />
		</CreateCSharpManifestResourceName>
		<!-- Create the target resource names for non-culture non-resx files. -->
		<CreateCSharpManifestResourceName Condition="'@(NonResxWithNoCulture)'!=''" ResourceFiles="@(NonResxWithNoCulture)" RootNamespace="$(RootNamespace)">
			<Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithNoCulture" />
		</CreateCSharpManifestResourceName>
		<!-- Create the target resource names for culture non-resx files. -->
		<CreateCSharpManifestResourceName Condition="'@(NonResxWithCulture)'!=''" ResourceFiles="@(NonResxWithCulture)" RootNamespace="$(RootNamespace)">
			<Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithCulture" />
		</CreateCSharpManifestResourceName>
	</Target>
	<PropertyGroup>
		<!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
		<DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
		<DebugType Condition=" '$(DebugType)' == 'none' "></DebugType>
		<_DisabledWarnings>$(NoWarn)</_DisabledWarnings>
		<!-- Provide a facility to override UseHostCompilerIfAvailable-->
		<UseHostCompilerIfAvailable Condition=" '$(UseHostCompilerIfAvailable)' == ''">true</UseHostCompilerIfAvailable>
	</PropertyGroup>
	<!-- These two compiler warnings are raised when a reference is bound to a different version
             than specified in the assembly reference version number.  MSBuild raises the same warning in this case,
             so the compiler warning would be redundant. -->
	<PropertyGroup Condition="('$(TargetFrameworkVersion)' != 'v1.0') and ('$(TargetFrameworkVersion)' != 'v1.1')">
		<_DisabledWarnings Condition="'$(_DisabledWarnings)' != ''">$(_DisabledWarnings);</_DisabledWarnings>
		<_DisabledWarnings>$(_DisabledWarnings)1701;1702</_DisabledWarnings>
	</PropertyGroup>
	<ItemGroup>
		<DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''" />
	</ItemGroup>
	<PropertyGroup>
		<CoreCompileDependsOn>_ComputeNonExistentFileProperty</CoreCompileDependsOn>
	</PropertyGroup>
	<Target Name="CoreCompile" Inputs="$(MSBuildAllProjects);&#xD;&#xA;                @(Compile);&#xD;&#xA;                @(ManifestResourceWithNoCulture);&#xD;&#xA;                $(ApplicationIcon);&#xD;&#xA;                $(AssemblyOriginatorKeyFile);&#xD;&#xA;                @(ManifestNonResxWithNoCultureOnDisk);&#xD;&#xA;                @(ReferencePath);&#xD;&#xA;                @(CompiledLicenseFile);&#xD;&#xA;                @(EmbeddedDocumentation);                &#xD;&#xA;                @(CustomAdditionalCompileInputs)" Outputs="@(DocFileItem);&#xD;&#xA;                 @(IntermediateAssembly);&#xD;&#xA;                 $(NonExistentFile);&#xD;&#xA;                 @(CustomAdditionalCompileOutputs)" DependsOnTargets="$(CoreCompileDependsOn)">
		<!--
		TODO: implement attributes

		BaseAddress="$(BaseAddress)"

		TODO: check if the attributes can be implemented
		CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
					DisabledWarnings="$(_DisabledWarnings)"
					DebugType="$(DebugType)"
					DelaySign="$(DelaySign)"
					DocumentationFile="@(DocFileItem)"
					ErrorReport="$(ErrorReport)"
					GenerateFullPaths="$(GenerateFullPaths)"
					KeyContainer="$(KeyContainerName)"
					KeyFile="$(KeyOriginatorFile)"
					LangVersion="$(LangVersion)"
					ModuleAssemblyName="$(ModuleAssemblyName)"
					Optimize="$(Optimize)"
					PdbFile="$(PdbFile)"
					UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
					WarningsAsErrors="$(WarningsAsErrors)"
					WarningsNotAsErrors="$(WarningsNotAsErrors)"
		-->
		<JScript AdditionalLibPaths="$(AdditionalLibPaths)" AddModules="@(AddModules)" AutoRef="$(AutoRef)" CodePage="$(CodePage)" DefineConstants="$(DefineConstants)" EmitDebugInformation="$(DebugSymbols)" Fast="$(Fast)" FileAlignment="$(FileAlignment)" MainEntryPoint="$(StartupObject)" NoLogo="$(NoLogo)" NoStandardLib="$(NoStandardLib)" OutputAssembly="@(IntermediateAssembly)" Platform="$(PlatformTarget)" References="@(ReferencePath)" Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)" ResponseFiles="$(CompilerResponseFile)" Sources="@(Compile)" TargetType="$(OutputType)" ToolPath="$(JscriptToolPath)" TreatWarningsAsErrors="$(TreatWarningsAsErrors)" Utf8Output="$(Utf8Output)" WarningLevel="$(WarningLevel)" Win32Icon="$(ApplicationIcon)" Win32Resource="$(Win32Resource)" />
	</Target>
	<Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />
</Project>
